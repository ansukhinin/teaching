#используем встроеный модуль zipfile вместо вызова os.system для выполнения внешней программы
#Перед нами стоит следующая задача: Составить программу,
#которая создаёт резервные копии всех наших важных файлов.
#Разница в том, что теперь мы проверяем, существует ли каталог с именем,
#соответствующем текущей дате, внутри главного каталога для хранения резервных
#копий. Для этого мы используем функцию os.path.exists.
#Если он не существует, мы создаём его функцией os.mkdir
import os
import zipfile
import time

# 1. Файлы и каталоги, которые необходимо скопировать, собираются в список.
source = ['D:\\proba', 'D:\\python']
# Заметьте, что для имён, содержащих пробелы, необходимо использовать
# двойные кавычки внутри строки.

# 2. Резервные копии должны храниться в основном каталоге резерва.
target_dir = 'D:\\rezerv' # Подставьте тот путь, который вы будете использовать.

# 3. Файлы помещаются в zip-архив.
# 4. Текущая дата служит именем подкаталога в основном каталоге
today = target_dir + os.sep + time.strftime('%d%m%Y')
# os.sep – содержит разделитель пути для конкретной операционной системы
# Текущее время служит именем zip-архива
now = time.strftime('%H%M%S')

# Создаём каталог, если его ещё нет
if not os.path.exists(today):
    os.mkdir(today) # создание каталога
    print('Каталог успешно создан', today)

# Имя zip-файла
target = today + os.sep + now + '.zip'

# 5. Используем команду "zipfile" для помещения файлов в zip-архив
zip_command = zipfile.ZipFile(target,'w') #создание файла архива 
print('файл архива',target)
# Запускаем создание резервной копии
for isource in source:
    for root, dirs, files in os.walk(isource):
        for file in files:
            zip_command.write(os.path.join(root,file))#запись файлов в архив
            print('в архив добавлен файл {0}{1}'.format(root,file))
print('Резервная копия успешно создана в', target)
zip_command.close()

