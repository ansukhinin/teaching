'''
Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран сумму первой пятерки чисел из этой последовательности, затем сумму второй пятерки, и т. д.
Но последовательность не дается вам сразу целиком. С течением времени к вам поступают её последовательные части. Например, сначала первые три элемента, потом следующие шесть, потом следующие два и т. д.
Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности и выводить сумму пятерок последовательных элементов по мере их накопления.
Одним из требований к классу является то, что он не должен хранить в себе больше элементов, чем ему действительно необходимо, т. е. он не должен хранить элементы, которые уже вошли в пятерку, для которой была выведена сумма.
'''
class Buffer:

    def __init__(self):
        self.current_part = []  # пустой список

    def add(self, *a):
        self.current_part.extend(a) # расширяем список на величину *a
        while len(self.current_part) - 5 >= 0:  # работаем со списком пока он не станет меньше 5 с шагом 5
            print(sum(self.current_part[0:5]))  # печатаем сумму первых пяти элементов
            self.current_part = self.current_part[5:]   # удаляем из списка первые 5 элементов

    def get_current_part(self):
        return self.current_part    # возвращаем текущий список
